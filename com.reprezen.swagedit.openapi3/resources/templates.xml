<templates>
	<template name="OpenAPI version" 
       id="com.reprezen.swagedit.openapi3.templates.openapi_template" 
       description="OpenAPI version declaration" 
       context="com.reprezen.swagedit.openapi3.templates.root" 
       enabled="true">openapi: "3.0.1"</template>

<!--
	INFO  
 -->

	<template name="OpenAPI info" 
       id="com.reprezen.swagedit.openapi3.templates.info_template" 
       description="Provides descriptive metadata about this API specification" 
       context="com.reprezen.swagedit.openapi3.templates.root" 
       enabled="true">info:
  version: "1.0.0"
  title: ${API_title}
  description: ${API_description}
  termsOfService: https://${terms_url}
  contact:
    name: ${contact_name}
    url: https://${contact_url}
    email: ${contact_email}
  license:
    name: ${MIT}
    url: https://opensource.org/licenses/MIT</template>

	<template name="OpenAPI contact" 
       id="com.reprezen.swagedit.openapi3.templates.info_contact_template" 
       description="Provides contact metadata about this API specification" 
       context="com.reprezen.swagedit.openapi3.templates.info.contact" 
       enabled="true">name: ${contact_name}
url: https://${contact_url}
email: ${contact_email}</template>

<!--
	SERVERS 
 -->

	<template name="OpenAPI servers" 
       id="com.reprezen.swagedit.openapi3.templates.servers_template" 
       description="OpenAPI servers declaration" 
       context="com.reprezen.swagedit.openapi3.templates.root" 
       enabled="true">servers:
- url: https://${url}
  description: ${description}</template>
 
 <!--
 	PATHS 
  -->

     <template name="Object resource" 
       id="com.reprezen.swagedit.openapi3.templates.object_resource_template" 
       description="object resource template" 
       context="com.reprezen.swagedit.openapi3.templates.paths" 
       enabled="true">/${item}s/${id}:
  get:
    description: Get an ${item} with the given ID
    parameters:
      - name: ${id}
        in: path
        required: true
        description: The id of the ${item} to retrieve
        schema:
          type: string
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              $$ref: '${itemSchema}' 
      '404':
        description: Not Found
  put:
    description: Create a new ${item}
    requestBody:
      description: description
      content: 
        "application/json":
          schema:
            $$ref: "${itemSchema}"
    parameters:
      - name: ${id}
        in: path
        required: true
        description: The id of the ${item} to retrieve
        schema:
          type: string
    responses:
      '200':
        description: OK
      '404':
        description: Not Found
  delete:
    description: Delete the ${item}
    parameters:
      - name: ${id}
        in: path
        required: true
        description: The id of the ${item} to retrieve
        schema:
          type: string
    responses:
      '200':
        description: OK
      '404':
        description: Not Found</template>

     <template name="Collection resource" 
       id="com.reprezen.swagedit.openapi3.templates.collection_resource_template" 
       description="collection resource template" 
       context="com.reprezen.swagedit.openapi3.templates.paths" 
       enabled="true">/${item}s:
  get:
    description: A list of ${item}s
    responses:
      '200':
        description: OK
        headers:
          x-next:
            description: A link to the next page of responses
            schema:
              type: string
        content:
          application/json:
            schema:
              type: array
              items:
                $$ref: '${itemSchema}' 
  post:
    description: Create a new ${item}
    requestBody:
      description: description
      content: 
        "application/json":
          schema:
            $$ref: "${itemSchema}"
    responses:
      '201':
        description: Created
        headers:
          location: 
            schema:
              type: string
            description: URL of the created resource        
</template>
     <template name="Singleton resource" 
       id="com.reprezen.swagedit.openapi3.templates.singleton_resource_template" 
       description="singleton resource template" 
       context="com.reprezen.swagedit.openapi3.templates.paths" 
       enabled="true">/${item}:
  get:
    description: Retrieve the ${item}
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              $$ref: '${itemSchema}' 
  put:
    description: Create a new ${item}
    requestBody:
      description: description
      content: 
        "application/json":
          schema:
            $$ref: "${itemSchema}"
    responses:
      '201':
        description: Created
  delete:
    description: Delete the ${item}
    responses:
      '200':
        description: OK
</template>
<!--
	PATH ITEMS 
 -->
 
	<template name="get" 
       id="com.reprezen.swagedit.openapi3.templates.path_get_template" 
       description="GET template" 
       context="com.reprezen.swagedit.openapi3.templates.pathItem" 
       enabled="true">get:
  summary: Read
  description: Provide details for the entire list (for collection resources) or an item (for object resources)
  responses:
    '200':
      description: ${OK}
      content:
        application/json:
          schema:
            $$ref: ${model}</template>

     <template name="post" 
       id="com.reprezen.swagedit.openapi3.templates.path_post_template" 
       description="POST template" 
       context="com.reprezen.swagedit.openapi3.templates.pathItem" 
       enabled="true">post:
  summary: Create
  description: Create a new item
  requestBody:
    description: description
    content: 
      "application/json":
        schema:
          $$ref: "${input}"
  responses:
    '201':
      description: Created
      headers:
        location: 
          schema:
            type: string
          description: URL of the created resource</template>
     <template name="put" 
       id="com.reprezen.swagedit.openapi3.templates.path_put_template" 
       description="PUT template" 
       context="com.reprezen.swagedit.openapi3.templates.pathItem" 
       enabled="true">put:
  summary: Update
  description: Update the entire list (for collection resources) or an item (for object resources)   
  responses:
    '2${00}':
      description: OK</template>

     <template name="delete" 
       id="com.reprezen.swagedit.openapi3.templates.path_delete_template" 
       description="DELETE template" 
       context="com.reprezen.swagedit.openapi3.templates.pathItem" 
       enabled="true">delete:
  summary: Delete 
  description: Delete the entire list (for collection resources) or an item (for object resources)
  responses:
    '200':
      description: OK
      content:
        application/json:
          schema:
            $$ref: ${model}
    '404':
      description: Not Found</template>
    
    <template name="patch" 
       id="com.reprezen.swagedit.openapi3.templates.path_patch_template" 
       description="PATCH template" 
       context="com.reprezen.swagedit.openapi3.templates.pathItem" 
       enabled="true">patch:
  summary: Partial update
  description: ${Update}   
  responses:
    '2${00}':
      description: ${OK}
      content:
        application/json:
          schema:
            $$ref: ${model}</template>

    <template name="options" 
       id="com.reprezen.swagedit.openapi3.templates.path_options_template" 
       description="OPTIONS template" 
       context="com.reprezen.swagedit.openapi3.templates.pathItem" 
       enabled="true">options:
  summary: Request resource options
  description: Request information about methods available for resource manipulation 
  responses:
    '2${00}':
      description: OK</template>

    <template name="head" 
       id="com.reprezen.swagedit.openapi3.templates.path_head_template" 
       description="HEAD template" 
       context="com.reprezen.swagedit.openapi3.templates.pathItem" 
       enabled="true">head:
  summary: Query a resource in the server
  description: HEAD sends request and get the response only in the header, the body should not be used
  responses:
    '${200}':
      description: OK</template>
          
<!--
	RESPONSES
 -->
 
	<template name="OK response" 
       id="com.reprezen.swagedit.openapi3.templates.200_response" 
       description="OK template" 
       context="com.reprezen.swagedit.openapi3.templates.responses" 
       enabled="true">'2${00}':
  description: ${OK}</template>

    <template name="client error response" 
       id="com.reprezen.swagedit.openapi3.templates.400_response" 
       description="client error response template" 
       context="com.reprezen.swagedit.openapi3.templates.responses" 
       enabled="true">'4${00}':
  description: ${Client} error</template>

    <template name="server error response" 
       id="com.reprezen.swagedit.openapi3.templates.500_response" 
       description="server error response template" 
       context="com.reprezen.swagedit.openapi3.templates.responses" 
       enabled="true">'5${00}':
  description: ${Server} error</template>

<!--
	LINKS 
 -->

 	<template name="response link" 
       id="com.reprezen.swagedit.openapi3.templates.response_link" 
       description="server response link template" 
       context="com.reprezen.swagedit.openapi3.templates.response" 
       enabled="true">links:
  ${name}:
    $$ref: "${ref}"</template>

<!--
	PARAMETERS 
 -->
 
 <template name="path parameter" 
       id="com.reprezen.swagedit.openapi3.templates.path_parameter" 
       description="path parameter template" 
       context="com.reprezen.swagedit.openapi3.templates.parameter" 
       enabled="true">name: ${name}
in: path
description: ${ID}
required: true
schema:
  type: ${string}  
</template>

     <template name="header parameter" 
       id="com.reprezen.swagedit.openapi3.templates.header_parameter" 
       description="header parameter template" 
       context="com.reprezen.swagedit.openapi3.templates.parameter" 
       enabled="true">name: ${name}
in: header
description: ${ID}
required: true
schema:
  type: array
  items:
    type: ${integer}
    format: int64
style: simple
</template>

     <template name="query parameter" 
       id="com.reprezen.swagedit.openapi3.templates.query_parameter" 
       description="query parameter template" 
       context="com.reprezen.swagedit.openapi3.templates.parameter" 
       enabled="true">name: ${name}
in: query
description: ${ID}
required: false
schema:
  type: array
  items:
    type: ${string}
style: ${form}
explode: true
</template>

<!--
Request Body 
 -->
 
     <template name="request body" 
       id="com.reprezen.swagedit.openapi3.templates.body_request_object" 
       description="request body template" 
       context="com.reprezen.swagedit.openapi3.templates.requestBody" 
       enabled="true">description: ${description}
content: 
  "application/json":
    schema:
      $$ref: ${model}</template>
 
<!--
	NAMED SCHEMA: generated from SCHEMA OBJECT
 -->

<!--
	SCHEMA OBJECT
 -->
 
	<template name="simple schema" 
       id="com.reprezen.swagedit.openapi3.templates.schema.simple" 
       description="Schema definition with a required property" 
       context="com.reprezen.swagedit.openapi3.templates.schema" 
       enabled="true">properties:
  ${property}:
    type: integer
    format: int64</template>    
    
    <template name="schema with a required property" 
       id="com.reprezen.swagedit.openapi3.templates.schema.schema_with_property" 
       description="Schema definition with a required property" 
       context="com.reprezen.swagedit.openapi3.templates.schema" 
       enabled="true">required:
- ${property}
properties:
  ${property}:
    type: integer
    format: int64</template>      

	<template name="allOf schema" 
       id="com.reprezen.swagedit.openapi3.templates.schema.allOf_schema" 
       description="ALL OF schema definition" 
       context="com.reprezen.swagedit.openapi3.templates.schema" 
       enabled="true">allOf:
- $$ref: '${schema1}'
- type: object
  properties:
    ${name}:
      type: string</template>    

	<template name="anyOf schema" 
       id="com.reprezen.swagedit.openapi3.templates.schema.anyOf_schema" 
       description="ANY OF schema definition" 
       context="com.reprezen.swagedit.openapi3.templates.schema" 
       enabled="true">anyOf:
- $$ref: '${schema1}'
- type: object
  properties:
    ${name}:
      type: string</template>    
      
	<template name="oneOf schema" 
       id="com.reprezen.swagedit.openapi3.templates.schema.oneOf_schema" 
       description="ONE OF schema definition" 
       context="com.reprezen.swagedit.openapi3.templates.schema" 
       enabled="true">oneOf:
- $$ref: '${schema1}'
- type: object
  properties:
    ${name}:
      type: string</template>          

 	<template name="$ref property" 
       id="com.reprezen.swagedit.openapi3.templates.properties.ref" 
       description="Property with a schema $ref template" 
       context="com.reprezen.swagedit.openapi3.templates.properties" 
       enabled="true">propertyName:
  $$ref: "#/components/schemas/${schema}"</template>

<!--
	CALLBACKS 
 -->

 	<template name="callbacks" 
       id="com.reprezen.swagedit.openapi3.templates.callbacks" 
       description="Callback definition template" 
       context="com.reprezen.swagedit.openapi3.templates.callbacks" 
       enabled="true">${webhook}:
    'https://${url}':
      post:
        requestBody:
          description: Callback payload
          content: 
            'application/json':
              schema:
                $$ref: '${schema}'
        responses:
          '200':
            description: webhook successfully processed</template>
            
 <!--
 	CALLBACK 
  -->

     <template name="Object resource" 
       id="com.reprezen.swagedit.openapi3.templates.callback.object_resource_template" 
       description="object resource template" 
       context="com.reprezen.swagedit.openapi3.templates.callback" 
       enabled="true">/${resource}:
  get:
    description: ${description}
    responses:
      '200':
        description: Ok
        content:
          application/json:
            schema:
              type: array
              items:
                $$ref: '${responseModel}'
      default:
        description: Error
        content:
          'text/html':
            schema:
              $$ref: '${errorModel}'</template>            
</templates>